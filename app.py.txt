import streamlit as st
import sqlite3, os, datetime
import plotly.express as px

# =======================
# Database Setup & Patching
# =======================
def get_conn():
    return sqlite3.connect("timesculpt.db", check_same_thread=False)

def init_db():
    conn = get_conn()
    cur = conn.cursor()

    # Profiles
    cur.execute("""CREATE TABLE IF NOT EXISTS profiles (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT,
        pin TEXT,
        ai_toggle INTEGER DEFAULT 0,
        api_key TEXT
    )""")

    # Future Self
    cur.execute("""CREATE TABLE IF NOT EXISTS traits (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        profile_id INTEGER,
        trait TEXT
    )""")
    cur.execute("""CREATE TABLE IF NOT EXISTS letters (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        profile_id INTEGER,
        content TEXT
    )""")

    # Goals
    cur.execute("""CREATE TABLE IF NOT EXISTS goals (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        profile_id INTEGER,
        name TEXT,
        unit TEXT,
        target REAL,
        deadline TEXT,
        priority INTEGER,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )""")

    # Loops
    cur.execute("""CREATE TABLE IF NOT EXISTS loops (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        profile_id INTEGER,
        name TEXT,
        value REAL,
        unit TEXT,
        logged_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )""")

    # Lens
    cur.execute("""CREATE TABLE IF NOT EXISTS lens_lines (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        profile_id INTEGER,
        text TEXT,
        category TEXT,
        collection TEXT DEFAULT 'default'
    )""")

    conn.commit()
    conn.close()

def patch_db():
    conn = get_conn()
    cur = conn.cursor()
    # Ensure created_at exists in goals
    cur.execute("PRAGMA table_info(goals)")
    cols = [c[1] for c in cur.fetchall()]
    if "created_at" not in cols:
        cur.execute("ALTER TABLE goals ADD COLUMN created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP")

    # Ensure collection exists in lens_lines
    cur.execute("PRAGMA table_info(lens_lines)")
    cols = [c[1] for c in cur.fetchall()]
    if "collection" not in cols:
        cur.execute("ALTER TABLE lens_lines ADD COLUMN collection TEXT DEFAULT 'default'")

    conn.commit()
    conn.close()

# =======================
# Tab Render Functions
# =======================
def show_guide_tab():
    st.markdown("<h1 style='color:gold;'>TimeSculpt – Instructional Guide</h1>", unsafe_allow_html=True)
    st.write("TimeSculpt is not a tracker. It is a sculptor’s tool – every log, goal, and lens bends probability toward the self you choose.")

    st.subheader("Roadmap")
    st.markdown("""
    - **Profiles** → Secure identity  
    - **Future Self** → Traits + Letters  
    - **Goals** → Measurable targets  
    - **Input (Loops)** → Daily actions  
    - **Forecast** → Probabilities, ETA, narration  
    - **Interventions** → Small course-corrections  
    - **Diagnostics** → Charts + progress insight  
    - **Lens** → Upload texts to enrich narration  
    - **Settings** → AI toggle + API key  
    """)
    st.subheader("How to Use Each Tab")
    st.markdown("""
    1. Create a **Profile** with your name + PIN  
    2. Add **Future Self** traits + write letters  
    3. Set **Goals** (target, unit, deadline, priority)  
    4. Log **Loops** (any daily actions)  
    5. Review **Forecasts** and **Interventions**  
    6. Track results with **Diagnostics**  
    7. Upload a **Lens** (text, book, notes) to shape narration  
    8. Adjust **Settings** for AI toggle + key  
    """)

def show_profiles_tab():
    st.markdown("<h1 style='color:gold;'>Profiles</h1>", unsafe_allow_html=True)
    st.write("Create and manage your profiles here.")

def show_future_self_tab():
    st.markdown("<h1 style='color:gold;'>Future Self</h1>", unsafe_allow_html=True)
    st.write("Define traits and letters from your future self.")

def show_goals_tab():
    st.markdown("<h1 style='color:gold;'>Goals</h1>", unsafe_allow_html=True)
    st.write("Attach measurable targets to align with your identity.")

def show_loops_tab():
    st.markdown("<h1 style='color:gold;'>Input (Loops)</h1>", unsafe_allow_html=True)
    st.write("Log daily actions. Every action is timestamped.")

def show_forecast_tab():
    st.markdown("<h1 style='color:gold;'>Forecast</h1>", unsafe_allow_html=True)
    st.write("Forecasts use loops + goals to estimate trajectory.")

def show_interventions_tab():
    st.markdown("<h1 style='color:gold;'>Interventions</h1>", unsafe_allow_html=True)
    st.write("Small nudges + corrections based on data.")

def show_diagnostics_tab():
    st.markdown("<h1 style='color:gold;'>Diagnostics</h1>", unsafe_allow_html=True)
    st.write("Charts and metrics to visualize your evolution.")

def show_lens_tab():
    st.markdown("<h1 style='color:gold;'>Lens</h1>", unsafe_allow_html=True)
    st.write("Upload texts, books, or notes. Narration adapts to what you feed it.")

def show_settings_tab():
    st.markdown("<h1 style='color:gold;'>Settings</h1>", unsafe_allow_html=True)
    st.write("Toggle AI and configure API keys.")

# =======================
# Streamlit App
# =======================
def main():
    st.set_page_config(page_title="TimeSculpt", page_icon="⏳", layout="wide")

    # Init DB safely
    init_db()
    patch_db()

    # Sidebar Navigation
    TABS = ["Guide", "Profiles", "Future Self", "Goals", "Input (Loops)", 
            "Forecast", "Interventions", "Diagnostics", "Lens", "Settings"]
    choice = st.sidebar.radio("Navigate", TABS)

    # Render Tabs with error protection
    try:
        if choice == "Guide":
            show_guide_tab()
        elif choice == "Profiles":
            show_profiles_tab()
        elif choice == "Future Self":
            show_future_self_tab()
        elif choice == "Goals":
            show_goals_tab()
        elif choice == "Input (Loops)":
            show_loops_tab()
        elif choice == "Forecast":
            show_forecast_tab()
        elif choice == "Interventions":
            show_interventions_tab()
        elif choice == "Diagnostics":
            show_diagnostics_tab()
        elif choice == "Lens":
            show_lens_tab()
        elif choice == "Settings":
            show_settings_tab()
    except Exception as e:
        st.error(f"Error in {choice} tab: {e}")

if __name__ == "__main__":
    main()
